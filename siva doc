		String clusterNfidTemplate = "__________Using ClusterNfid_{}________";
		LOG.info(" inside SiteManagementService ");
		List<ApprovalCallbackURL> approvalcallbackinfoList = siteManagementRequest.getapprovalcallbackinfo();

		List<SiteManagementResponse> responseList = new ArrayList<>();
		String site_nfid_cancel = null;
		if (approvalcallbackinfoList != null && !approvalcallbackinfoList.isEmpty()) {

			piUrl = getWfmProperty("ONEFIBER_PI_K8");
			bonitaURL = getWfmProperty("BONITA_GET_CASE_DETAILS_URL");
//            String createClliUrl = getWfmProperty("Z_CLLI_NET_URL")

			getNFUrl = getWfmProperty("BONITA_NF_DETAILS_URL");
			
			final String reason = "Site Move";

			LOG.info("Storing the request in debug table ...");

			WsDebug wsDebug = new WsDebug();
			wsDebug.setRequestTime(new Timestamp(System.currentTimeMillis()));
			wsDebug.setResponseTime(new Timestamp(System.currentTimeMillis()));
			wsDebug.setRequestJson(new ObjectMapper().writeValueAsString(siteManagementRequest));
			wsDebug.setUrl("FROM FUZE");
			wsDebug.setEventName("SITE-MGMT-FUZE-REQUEST");

			String transactionIds = null;
			String changeTypes = null;
			String changeReasons = null;
			String nfids = null;
			if (approvalcallbackinfoList.size() > 1) {
				transactionIds = "Multiple";
				changeTypes = "Multiple";
				changeReasons = "Multiple";
				nfids = "Multiple";
			} else {
				transactionIds = approvalcallbackinfoList.get(0).getTransactionId();
				changeTypes = approvalcallbackinfoList.get(0).getChangeType();
				if (approvalcallbackinfoList.get(0).getChangeReason().length() > 50) {
					changeReasons = approvalcallbackinfoList.get(0).getChangeReason().substring(0, 49);
				} else {
					changeReasons = approvalcallbackinfoList.get(0).getChangeReason();
				}
				nfids = approvalcallbackinfoList.get(0).getNfid();
			}

			wsDebug.setKey1("TRANSACTION_ID");
			wsDebug.setValue1(transactionIds);
			wsDebug.setKey2("CHANGE_TYPE");
			wsDebug.setValue2(changeTypes);
			wsDebug.setKey3("CHANGE_REASON");
			wsDebug.setValue3(changeReasons);
			wsDebug.setNfid(nfids);
			wsDebug.setResponseJson("Request from FUZE");
			wsDebugRepository.save(wsDebug);

			String siteTypeRequired = "Y";
			siteTypeRequired = getWfmProperty("ONEFIBER_SCM_SITE_TYPE_REQUIRED");
			LOG.info("siteTyperequired value sis :: {}", siteTypeRequired);
			int index = 0;
			for (ApprovalCallbackURL approvalcallbackinfo : approvalcallbackinfoList) { 
				index=index+1;
				SiteManagementResponse response = new SiteManagementResponse();
				try {
					
					approvalcallbackinfo = replaceIllegalCharacters(approvalcallbackinfo);
					String transactionId = approvalcallbackinfo.getTransactionId();
					LOG.info("transactionId :::: {}", transactionId);

					SiteChangeApproval siteChangeApproval = siteChangeApprovalRepository
							.findByTransactionId(transactionId);
					if (siteChangeApproval != null && siteChangeApproval.getChangeType() != null) {
						LOG.info(" Data is exist in NF_ONET_SITE_CHANGE_APPROVAL for the given TransactionId: {}",
								transactionId);
						response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
								"transactionID " + transactionId + " already exist", response);
						responseList.add(response);
						continue;
					}
					
					//NTSCR-69294
					LOG.info("came here 1");
					if(approvalcallbackinfo.getFranchiseFlag()==null || "null".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())|| "".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
					
						LOG.info("came here 3");
						approvalcallbackinfo.setFranchiseFlag("OOF");
					/*	response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
								"Franchise Flag cannot be null ", response);
						responseList.add(response);
						continue;*/
					}

					String needByDate = approvalcallbackinfo.getNeedByDate();
					Date needDate = null;

					if (needByDate != null && !needByDate.isEmpty()) {
						LOG.info("NeedByDate is not null from Fuze");

						try {
							SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
							needDate = sdf.parse(needByDate);
							if (!needByDate.equals(sdf.format(needDate))) {
								needDate = null;
							}
						} catch (ParseException ex) {
							LOG.error("Ex - {}", ex.toString());
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Need By Date format is invalid ", response);
							responseList.add(response);
							continue;
						}
						if (needDate == null) {
							LOG.info("Invalid  need By Date ");
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Invalid Need By Date format.(MM/dd/yyyy) ", response);
							responseList.add(response);
							continue;

						}

						LOG.info("needDate after converting is ::: {}", needDate);
					}

					String telcoRoomReadyAct = approvalcallbackinfo.getTelcoRoomReadyAct();
					LOG.info("telcoRoomReadyAct:::: {}", telcoRoomReadyAct);
					String telcoRoomReadyEst = approvalcallbackinfo.getTelcoRoomReadyEst();
					LOG.info("telcoRoomReadyEst::: {}", telcoRoomReadyEst);
					Date telcoRoomReadyDate = null;
					Date telcoRoomReadyActDate = null;
					Date telcoRoomReadyEstDate = null;

					if (telcoRoomReadyAct != null && !telcoRoomReadyAct.isEmpty()) {
						try {
							SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
							telcoRoomReadyActDate = sdf.parse(telcoRoomReadyAct);
							if (!telcoRoomReadyAct.equals(sdf.format(telcoRoomReadyActDate))) {
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Telco Room ready Act Date format is invalid ", response);
								responseList.add(response);
								continue;
							}
						} catch (ParseException ex) {
							LOG.error("Ex - {}", ex.toString());
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Telco Room ready Act Date format is invalid ", response);
							responseList.add(response);
							continue;
						}
						LOG.info("TelcoRoomReady Act after converting is ::: {}", telcoRoomReadyActDate);

					}

					if (telcoRoomReadyEst != null && !telcoRoomReadyEst.isEmpty()) {
						try {
							SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
							telcoRoomReadyEstDate = sdf.parse(telcoRoomReadyEst);
							if (!telcoRoomReadyEst.equals(sdf.format(telcoRoomReadyEstDate))) {
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Telco Room ready Est Date format is invalid ", response);
								responseList.add(response);
								continue;
							}
						} catch (ParseException ex) {
							LOG.error("Ex - {}", ex.toString());
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Telco Room ready Est Date format is invalid ", response);
							responseList.add(response);
							continue;
						}
						LOG.info("TelcoRoomReady Est after converting is ::: {}", telcoRoomReadyEstDate);

					}

					String poryear = approvalcallbackinfo.getPorBuildYear();

					System.out.println("came here to check porsite" + approvalcallbackinfo.getPorBuildSite());
//                    String porBuildSite = approvalcallbackinfo.getPorBuildSite()
					String porsite = null;

					if ((approvalcallbackinfo.getPorBuildSite() != null)
							&& ((approvalcallbackinfo.getPorBuildSite().equals("Y"))
									|| (approvalcallbackinfo.getPorBuildSite().equals("N"))
									|| (approvalcallbackinfo.getPorBuildSite().equals("n"))
									|| (approvalcallbackinfo.getPorBuildSite().equals("y")))) {
						porsite = approvalcallbackinfo.getPorBuildSite().toUpperCase();

					}

					LOG.info(" *** came here to check porsite zxcx: {}", porsite);

					Integer siteSeqId = customQueriesRepository.getSequenceMaxValueForSiteChange();
					String siteNfId = null;
					Integer siteId = 0;
					Integer clusterId = 0;
					SiteChangeApproval siteChangeApprovalObj = prepareSiteChangeApprovalObj(approvalcallbackinfo,
							siteManagementRequest, siteSeqId, siteNfId, null, null, siteId, clusterId, needDate,
							telcoRoomReadyDate, poryear, porsite, telcoRoomReadyActDate, telcoRoomReadyEstDate);
					LOG.info("After validating payload ");
					String cancelAckw=null;
					//call the table property ONEFIBER_CANCEL_ACKNOWLEDGE_TASK_STATUS
					cancelAckw=getWfmProperty("ONEFIBER_CANCEL_ACKNOWLEDGE_TASK_STATUS");
					try {
						if(approvalcallbackinfo.getProjectStatus().equalsIgnoreCase("cancelled")) {
							if(approvalcallbackinfo.getChangeType().matches("Change")) {
								approvalcallbackinfo.setChangeType("CANCEL");
								approvalcallbackinfo.setChangeReason("SITE is NOT NEEDED");
								////approvalcallbackinfo.setSiteCategoryType("Core Infrastructure");
								//approvalcallbackinfo.setRemoveFlag("Y");
								//LOG.info("lets cancel the site ...because fuze proejct status is cancelled");
							}
							//cancelTaskPAMCall(cancelAckw,nfids,approvalcallbackinfo.getFuzeProjectId(),approvalcallbackinfo.getTransactionId(),approvalcallbackinfo.getProjectStatus());
						}

					}catch(Exception e) {
						
					}
					
//***********************ChangeType Add***********************************//
					if ("Add".equalsIgnoreCase(approvalcallbackinfo.getChangeType())) {

						Market market = null;
						Cluster cluster = null;
						MarketUACE marketUACE = null;

						LOG.info("inside ChangeType ADD ");

						/* Need by Date Validation Disabled NTSCR-34255
						// NTSCR-3958: CE should allow Null values for needByDate
						if (needByDate != null && !needByDate.isEmpty()) {
							DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
							Date todayDate = new Date();
							Date todayWithZeroTime = formatter.parse(formatter.format(todayDate));
							LOG.info("current Date ::: {} needDate ::: {}", todayWithZeroTime, needByDate);
							Date needByDateValue = new Date(needByDate);
							if (needByDateValue.compareTo(todayWithZeroTime) < 0) {
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Need By Date cannot be less than current date for ADD transaction", response);
								responseList.add(response);
								continue;
							}
						}*///
                       
						if ("New".equalsIgnoreCase(approvalcallbackinfo.getChangeReason())) {

							LOG.info("inside ChangeReason NEW");

							String technologyInd = approvalcallbackinfo.getTechnologyInd();
							String technologyStatus = getWfmProperty("ONEFIBER_TECHNOLOGY_REQ_IND_STATUS");
							LOG.info("ONEFIBER_TECHNOLOGY_REQ_IND_STATUS Value ::: {} technologyInd ::: {}",
									technologyStatus, technologyInd);

							if ("ON".equalsIgnoreCase(technologyStatus)) {
								String technologyIndValues = getWfmProperty("ONEFIBER_TECHNOLOGY_IND_VALUES");
								LOG.info("technologyIndValues ::: {}", technologyIndValues);

								if (technologyInd != null && !technologyInd.equals("")) {
									if (technologyIndValues.contains(technologyInd)) {

										if (!technologyInd.matches("4G|5G")) {
											LOG.info("multiple technologyValues or no technologyInd value recorded");
											response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
													"Invalid technologyInd:" + technologyInd, response);
											responseList.add(response);
											continue;
										}

										LOG.info("technologyInd value is:: {}", technologyInd);
									} else {
										LOG.info("technologyValues and technologyInd doesnot match so throwing error");
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												"Invalid technologyInd:" + technologyInd, response);
										responseList.add(response);
										continue;
									}
								} else {
									LOG.info(" technologyInd is mandatory should not be null When Status is ON ");
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Invalid technologyInd Value :" + technologyInd, response);
									responseList.add(response);
									continue;

								}
							}
							
							//NTSCR-97234
							String zRingId = approvalcallbackinfo.getDfRingId();
							LOG.info("zLocRingId:::"+zRingId);

							String siteState = approvalcallbackinfo.getSiteState();
		//NTSCR-69294		String marketName = approvalcallbackinfo.getMarketName();
							// 1454
							String hubMarketName = approvalcallbackinfo.getHubMarketName();
							String siteName = approvalcallbackinfo.getSiteName();
							String clusterName = approvalcallbackinfo.getClusterName();
							String siteCategoryType = approvalcallbackinfo.getSiteCategoryType();
							String siteCategorySubType = approvalcallbackinfo.getSiteCategorySubType();
							String clusterNfId = approvalcallbackinfo.getClusterNfId();
							String siteStatus = approvalcallbackinfo.getSiteStatus();
//                            String structureType = approvalcallbackinfo.getStructureType()
							String fuzeSiteId = approvalcallbackinfo.getFuzeSiteId();
							String fuzeProjectId = approvalcallbackinfo.getFuzeProjectId();
							Double siteLat = approvalcallbackinfo.getSiteLat();
							Double siteLong = approvalcallbackinfo.getSiteLong();
							String siteStreetAddress = approvalcallbackinfo.getSiteStreetAddress();
							String siteCity = approvalcallbackinfo.getSiteCity();
							String existingSiteNfid = null;
							String newSiteNfid = null;
							BigInteger strandCount = null;
							String tempSiteNfid=null;        //NTSCR-22847
							Integer tempSiteId=null;		 //NTSCR-22847
//                            boolean isItsNewSite = false

							if (StringUtils.isNotBlank(approvalcallbackinfo.getFiberCount())) {
								Long strandCountValue = Long.parseLong(approvalcallbackinfo.getFiberCount());
								strandCount = BigInteger.valueOf(strandCountValue);
							}
							// String strandCount = approvalcallbackinfo.getStrandCount()

							LOG.info("siteCategoryType values :: {} siteCategorySubType::: {}", siteCategoryType,
									siteCategorySubType);
							LOG.info(" clusterNfId ::: {}", clusterNfId);

							if ("Y".equalsIgnoreCase(siteTypeRequired) && siteCategoryType == null) {
								LOG.info(" siteType is required and siteCategoryType is null so returning error ");
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Invalid siteCategoryType:" + siteCategoryType, response);
								responseList.add(response);
								continue;
							}

							if (siteCategoryType != null) {
								LOG.info("siteCategoryType is not null condition :::check with siteRef table: ");
								if ("".equalsIgnoreCase(siteCategorySubType)) {
									LOG.info("siteCategorySubType :: {}", siteCategorySubType);
									siteCategorySubType = null;
								}

								List<SiteTypeRef> siteTypeRefList = siteTypeRefRepo
										.findBySiteCategoryTypeIgnoreCaseAndSiteCategorySubTypeIgnoreCase(
												siteCategoryType, siteCategorySubType);
								if (siteTypeRefList != null && !siteTypeRefList.isEmpty()) {
									LOG.info("siteCategory and siteCategorySubType values are valid ");
								} else {
									LOG.info(
											" siteCategoryType and siteSubCategory value not exist in siteType Ref table returning error ");
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Invalid siteCategoryType/siteSubCategoryType:" + siteCategoryType + ","
													+ siteCategorySubType,
											response);
									responseList.add(response);
									continue;
								}
							}

							// NTSCR-18840
							if (siteStreetAddress == null || siteStreetAddress.isEmpty() || siteCity == null
									|| siteCity.isEmpty()) {
								LOG.info("NO Valid Address is provided");
								if ((siteLat == null || siteLat.toString().isEmpty())
										|| (siteLong == null || siteLong.toString().isEmpty())) {
									LOG.info("Transaction is rejected");
									ProcessErrorRequest per = createProcessErrReq(approvalcallbackinfo.getNfid(),
											approvalcallbackinfo.getTransactionId(), "Address and Lat/Long Empty",
											"Transaction Rejected because address and lat/Long are both empty");
									processErrorInfoService.saveErrorInfo(per);
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Valid Address or Lat/Long must be provided", response);
									responseList.add(response);
									continue;
								}
							}

							if (siteState != null && siteState.length() > 2) {
								LOG.info(" inside siteState is not valid so returning error::: ");
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Invalid SiteState:" + siteState, response);
								responseList.add(response);
								continue;
							}

							if (siteState == null || "".equals(siteState)) {
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Invalid SiteState:" + siteState, response);
								responseList.add(response);
								continue;
							}
							
							//NTSCR-75962
							
							
							
							String marketName=null;
							boolean latLongFlag=false;
							
							if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())){
								List<Cluster> clusterMarket = clusterRepo.findByClusterNameIgnoreCase(approvalcallbackinfo.getClusterName());
							
								if(clusterMarket.size()==1) {
									marketName = clusterMarket.get(0).getMarketName();
									LOG.info("market Name22::" + marketName);

								}
								
								else {
									
									marketName	 = locusService.getMarketName(String.valueOf(approvalcallbackinfo.getSiteLat()),String.valueOf(approvalcallbackinfo.getSiteLong()),"getMartNameByLatandLong");
									LOG.info("market Name33::" + marketName);
									
									if(null==marketName || marketName.equalsIgnoreCase("") ||  "null".equalsIgnoreCase(marketName) || marketName.contains("Region") ) {
										
										
										marketName	 = locusService.getMarketName(String.valueOf(approvalcallbackinfo.getSiteLat()),String.valueOf(approvalcallbackinfo.getSiteLong()),"getProposedMartNameByLatLong");
										LOG.info("market Name444::" + marketName);
									}
									
										
									boolean flag =false;
									String locusPrimaryMarket=null;
									if(null==marketName || marketName.equalsIgnoreCase("") ||  "null".equalsIgnoreCase(marketName)) {
										flag=true;
									}else {
										locusPrimaryMarket = marketRepo.getMarketByMarketName(marketName.toString().toUpperCase()).getPrimaryMarket();
									//Market m1 = marketRepo.getMarketByMarketName("Dallas 2, TX");
									LOG.info("primary locus market Name444::" + locusPrimaryMarket);
									
							
									}
									
									for (Cluster c : clusterMarket) {

										if (!marketName.equalsIgnoreCase(c.getMarketName())) {
											LOG.info("marketNames from cluster not equal to fim market retruned");
											flag = true;
										} else {

											break;
										}
									}
											
											
										
										
										if(flag==true) {
											
											
											for(Cluster c : clusterMarket) {
												LOG.info("locus primary Market::"+locusPrimaryMarket+"cluster marketName::"+c.getMarketName());
												 if((locusPrimaryMarket.equalsIgnoreCase(c.getMarketName()))) {
													marketName = locusPrimaryMarket;
													LOG.info("locus primary marketName matches with one of the market from Cluster");
													flag=false;
													break;
													
												}
												}
											if(flag==true) {
											int count = 0;
											for(Cluster c : clusterMarket) {
												if(count == 0) {
													marketName = marketRepo.getMarketByMarketName(c.getMarketName()).getPrimaryMarket();
													count++;
												}
												else {
													String market1 = marketRepo.getMarketByMarketName(c.getMarketName()).getPrimaryMarket();
													if((null==market1) || !(market1.equalsIgnoreCase(marketName)) ) {
														 latLongFlag=true;
														 break;
													}
												}
											}
											}
											
										}
									
								
								}
								}
							
							
							if(latLongFlag==true) {
								LOG.info("tes lat long");

								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Unable to determine the market based on the Lat/Long and cluster provided ", response);
								responseList.add(response);
								continue;
							}
							
							
								
							approvalcallbackinfo.setMarketName(marketName);
							
							LOG.info("marketName344:"+approvalcallbackinfo.getMarketName());
							marketNameNew=marketName;
							
								
							//NTSCR-18801
							String primaryMarket = null;
							String sql = "select nvl(primary_market,market_name) from wfm_nf.nf_onet_market where market_name='"
									+ marketName + "'";
							primaryMarket = oneFiberDao.getPrimaryMarket(marketName);

							// NTSCR-5748 code ends

							Site site = null;
							StringBuilder multipleSiteFuzeProjectId = new StringBuilder("");
//                            StringBuilder multipleCityStreetNfid =  new StringBuilder("")
							StringBuilder multipleFuzeSiteId = new StringBuilder("");
						    
							if ( StringUtils.isNotBlank(fuzeProjectId)) {
								
								Long fuzeProj = Long.parseLong(fuzeProjectId);
								
								//NTSCR-69294
								BigInteger fuzeProjId = BigInteger.valueOf(fuzeProj);
								LOG.info("fuze prjectId"+fuzeProjId);
								List<SiteFuzeProject> fuzePojectIdDb = sitefuzeProjectRepo.findByFuzeProjectId(fuzeProjId);
								LOG.info("size fuze project size"+fuzePojectIdDb.size());
	                            if ((fuzePojectIdDb.size()>0)  )
	                    {
									
	                            	boolean RejectUpdate = updateRejectFields(approvalcallbackinfo);
									
								}
								}
							if (marketName != null 
									
									|| ("IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())))							
							
							 {

								LOG.info("Market Name {} is Valid", primaryMarket);

								//NTSCR-38419 -fix added && condition
								if (StringUtils.isBlank(fuzeSiteId) && (!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag()))) {

									if (StringUtils.isBlank(fuzeProjectId)) {
										LOG.info(" FuzeProjectId required for add transaction");
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												"FuzeProjectId required ." + fuzeProjectId, response);
										responseList.add(response);
										continue;
									}
										
										// Start NTSCR-30708
										List<SiteFuzeProject> fuzeProjects = getFuzeProjects(fuzeProjectId);
										if(!fuzeProjects.isEmpty())
										{
											if(fuzeProjects.size() > 1)
											{
												for (int i = 0; i < fuzeProjects.size(); i++) {
													SiteFuzeProject sfp = fuzeProjects.get(i);
													multipleSiteFuzeProjectId.append(";");
													multipleSiteFuzeProjectId.append(sfp.getSiteNfid());
												}
												multipleSiteFuzeProjectId.deleteCharAt(0);
												String multiNFIDs = multipleSiteFuzeProjectId.toString();
												LOG.info("Multiple Site-Fuze-Project NFIDs: {} found for the provided fuzeProjectId {}",
														multiNFIDs, fuzeProjectId);
												response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
														String.format("fuzeProjectId already exists on more than one site_nfid in Cofee: { %s}",
																multiNFIDs),
														response);
												responseList.add(response);
												continue;
											}
											else
											{
												String sitefuzeprojectNfid = fuzeProjects.get(0).getSiteNfid();
												LOG.info("single Site-Fuze-Project NFID: {} found for the provided fuzeProjectId {}",
														sitefuzeprojectNfid, fuzeProjectId);
												// notify WFM to update NF Tree
												Site linkedSite = siteRepo.findBysiteNfId(sitefuzeprojectNfid);
												Integer linkedSiteId = linkedSite.getSiteId();
												getGolbalSiteId().put(index, linkedSiteId);
												associateFuzeProjectInNfTree(approvalcallbackinfo, transactionId, linkedSiteId,
														fuzeProjectId, sitefuzeprojectNfid, null);
														response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
															String.format("fuzeProjectId matches with only one pre-candidate site NFID in cofee: { %s }",
															sitefuzeprojectNfid),
																response);
												responseList.add(response);
														
												continue;
											}
										}
										// End NTSCR-30708

										/*Long fuzeProj = Long.parseLong(fuzeProjectId);
										BigInteger fuzeProjId = BigInteger.valueOf(fuzeProj);
										List<Site> siteList = siteRepo.findByfuzeProjectId(fuzeProjId);

										if (siteList != null && !siteList.isEmpty()) {
											if (siteList.size() > 1) {
												for (int i = 0; i < siteList.size(); i++) {
													Site siteObj = siteList.get(i);
													multipleSiteFuzeProjectId.append(";");
													multipleSiteFuzeProjectId.append(siteObj.getSiteNfId());
												}
												multipleSiteFuzeProjectId.deleteCharAt(0);
												LOG.info(
														"multiple records found in the site table with the provided fuzeProjectId {}",
														fuzeProjectId);
												response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
														"fuzeProjectId already exists on more than one site_nfid in Cofee:"
																+ "{" + multipleSiteFuzeProjectId.toString() + "}",
														response);
												responseList.add(response);
												continue;

											} else {
												for (int i = 0; i < siteList.size(); i++) {
													Site siteObj = siteList.get(i);
													if (i == 0) {
														LOG.info(
																"single record found in the site table with the provided fuzeProjectId {}",
																fuzeProjectId);
														site = siteObj;
														response = prepareResponse(
																SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
																"fuzeProjectId matches with only one site in cofee:" + "{ "
																		+ siteObj.getSiteNfId() + "}",
																response);
														responseList.add(response);
														continue;
													}

												}
											}
										}*/
									}

									/*
									 * site = siteRepo.findByMarketNameIgnoreCaseAndSiteNameIgnoreCase(marketName,
									 * siteName)
									 */
									//NTSCR-38419 - fix addded if condition
									String statusInfo = null;
									String statusFranchise = null;
									
									// NTSCR-49683
									boolean isGrandChild = false;
									Site parentSite = null;
									
								if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
									clusterId = 0;
									// Integer siteId = 0
									String clustClusterName = null;
									String clustMarketName = null;
									String multipleMarketName = null;

//	                                List<Cluster> clusterList = clusterRepo.findByMarketNameIgnoreCaseAndClusterNameIgnoreCase(marketName, clusterName)
									List<Cluster> clusterByNameList = clusterRepo
											.findByClusterNameIgnoreCase(approvalcallbackinfo.getClusterName());
									
									// as of NTSCR-51371 //CLusterNfid won't be respected and priority to cluster name
									cluster = getClusterIfExistsWithinMarket(marketName, clusterName);
									if(cluster == null)
										cluster = getClusterIfExistsWithinPrimaryMarket(primaryMarket, clusterName);	//NTSCR -32843
									
									if (cluster != null && cluster.getClusterId() > 0) {
										clusterId = cluster.getClusterId();
										clusterNfId = cluster.getClusterNfId();
										clustClusterName = cluster.getClusterName();
										clustMarketName = cluster.getMarketName();
										marketName = cluster.getMarketName();
										clusterName = cluster.getClusterName();
										LOG.info(
												"{} Record is exist in onet_cluster table for the the given MarketName: {} and clusterName: {}",
												clusterId, marketName, clusterName);
										LOG.info("clustClusterName ::: {}", clustClusterName);
										LOG.info("clustMarketName ::: {}", clustMarketName);
										approvalcallbackinfo.setClusterNfId(clusterNfId);
									} // 1454--If cluster doesn't exist for in the marketName and hubMarketName !=
										// marketName//
									else if (cluster == null && !StringUtils.isBlank(hubMarketName)
											&& !hubMarketName.equalsIgnoreCase(marketName)) {
										CreateClusterResponseBean createClusterResponseBean = createNewClusterForMarketName(
												marketName, clusterName);
										if (createClusterResponseBean == null) {
											LOG.info("Error in creating new Cluster: {} for marketName: {}", clusterName,
													marketName);
											response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
													"Error while creating new Cluster: "
															+ approvalcallbackinfo.getClusterName(),
													response);
											responseList.add(response);
											continue;
										}
										clusterNfId = createClusterResponseBean.getClusterNfid();
										if (!StringUtils.isBlank(clusterNfId)) {
											cluster = getClusterIfExistsWithinMarket(marketName, clusterName);
											// setting cluster details
											if (cluster != null && cluster.getClusterId() > 0) {
												clusterId = cluster.getClusterId();
												clusterNfId = cluster.getClusterNfId();
												clustClusterName = cluster.getClusterName();
												clustMarketName = cluster.getMarketName();
												LOG.info(
														"{} Record is exist in onet_cluster table for the the given MarketName: {} and clusterName: {}",
														clusterId, marketName, clusterName);
												LOG.info("clustClusterName ::: {}", clustClusterName);
												LOG.info("clustMarketName ::: {}", clustMarketName);
												approvalcallbackinfo.setClusterNfId(clusterNfId);
											}
										} // 1454---end
									} else if (clusterByNameList != null && !clusterByNameList.isEmpty()) {
										boolean clusterExistsInPrimaryMarketFlag = false; //NTSCR - 32843
										for (int i = 0; i < clusterByNameList.size(); i++) {
											Cluster clusterObj = clusterByNameList.get(i);
											LOG.info("It is site ADD & given Hub is present in diff markets in COE");
											if (i == 0) {
												multipleMarketName = clusterObj.getMarketName();
												clusterExistsInPrimaryMarketFlag = primaryMarket.equals(oneFiberDao.getPrimaryMarket(multipleMarketName));
											} else {
												multipleMarketName = multipleMarketName + ";" + clusterObj.getMarketName();
												clusterExistsInPrimaryMarketFlag = primaryMarket.equals(oneFiberDao.getPrimaryMarket(multipleMarketName));
											}
										}
										LOG.info(" multipleMarketName value ::: {}", multipleMarketName);
										if(clusterExistsInPrimaryMarketFlag)
											LOG.info("Cluster exists in the primary market: {}",primaryMarket);
										else {
											response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
													"Hub in COE is present in this market List " + "{" + multipleMarketName
															+ "}" + " but not in the market from Fuze: "
															+ approvalcallbackinfo.getMarketName(),
													response);
											responseList.add(response);
											continue;
										}
									} else if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {

										LOG.info(" retrieving NFID for Cluster got failed so returning error");
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												"Invalid Cluster Name provided: " + approvalcallbackinfo.getClusterName(),
												response);
										responseList.add(response);
										continue;

									}

									LOG.info("From SMService fuzeSiteId {}", fuzeSiteId);

									if (StringUtils.isNotBlank(fuzeSiteId)) {
										// Adding changes for NTSAU-14339 to update RemoveFlag

										String projectStatus = approvalcallbackinfo.getProjectStatus();

										LOG.info("Incoming ProjectStatus: {}", projectStatus);

										
				                    	final String change = "Change";			                    									
										// Adding changes for NTSAU-35934
										LOG.info("Querying the site table to check any records with the fuzeSiteId.");
										// as of NTSCR-49683 check will be only on fuze Site ID
										List<Site> siteFuzeSiteIdList = //siteRepo.findSiteByFuzeSiteIdandRemoveFlag(fuzeSiteId)
										siteRepo.findByvFuzeSiteIdOrderBySiteCreatedDate(fuzeSiteId);//NTSCR-54093
										
										//List<Site> siteFuzeSiteIdList = siteRepo.findSiteByFuzeSiteIdandClustId(fuzeSiteId, clusterId) ///Ntscr-22847
										if (siteFuzeSiteIdList != null && !siteFuzeSiteIdList.isEmpty()) {
											
											LOG.info(
													"Site table has records with the fuzeSiteId:{}",
													fuzeSiteId);

											// TODO check for fuze project ID existence
											if (StringUtils.isBlank(fuzeProjectId)) {
												LOG.info(" FuzeProjectId required for add transaction");
												response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
														String.format("For Fuze SiteID %s, FuzeProjectId required %s", fuzeSiteId, fuzeProjectId),
														response);
												responseList.add(response);
												continue;
											}

											if (!"Cancelled".equalsIgnoreCase(projectStatus)) {
												// NTSCR-49683 Going forward, multiple fuze_site_ids can exist. doesn't matter what cluster the existing ones are associated with
												/*if (siteFuzeSiteIdList.size() > 1) {
													for (int i = 0; i < siteFuzeSiteIdList.size(); i++) {
														Site siteObj = siteFuzeSiteIdList.get(i);
														multipleFuzeSiteId.append(";");
														multipleFuzeSiteId.append(siteObj.getSiteNfId());
													}
													multipleFuzeSiteId.deleteCharAt(0);

													LOG.info(
															"multiple records found in the site table with the provided fuzeSiteId: {}",
															fuzeSiteId);
													response = prepareResponse(
															SiteManagementConstants.RESPONSE_STATUS_FAILED,
															"fuzeSiteId already exists on more than one site_nfid in Cofee:"
																	+ "{" + multipleFuzeSiteId.toString() + "}",
															response);
													responseList.add(response);
													continue;

												} else {*/
													
													List<SiteFuzeProject> fuzePrjLst = getFuzeProjects(fuzeProjectId);
													
													if(fuzePrjLst.isEmpty())
													{
														isGrandChild = true;
														parentSite = siteFuzeSiteIdList.get(0);
													}
													else {
														if(siteFuzeSiteIdList.size()>1)
														{
															SiteInfo siteInf = determindFuzeProjectStatus(fuzeProjectId, fuzeSiteId, responseList);
															if(siteInf == null)
																continue;// means returned site mgmt response is failure
															else
															{
																siteSeqId = customQueriesRepository.getSequenceMaxValueForSiteChange();
																SiteChangeApproval siteChangeApprovalObj1 = prepareSiteChangeApprovalObj(approvalcallbackinfo, siteManagementRequest, siteSeqId, siteNfId, null, null, siteId, clusterId, needDate, telcoRoomReadyDate, poryear, porsite, telcoRoomReadyActDate, telcoRoomReadyEstDate);

																siteChangeApprovalObj1.setTransactionId(approvalcallbackinfo.getTransactionId()+"-2");
																siteChangeApprovalObj1.setChangeType(change);
																siteChangeApprovalObj1.setChangeReason(reason);
																siteChangeApprovalObj1.setSiteNfId(siteInf.getSiteNfId());
																siteChangeApprovalObj1.setSiteId(siteInf.getSiteId());
																siteChangeApprovalObj1.setMarketName((primaryMarket != null) ? primaryMarket.toUpperCase() : null);
																siteChangeApprovalObj1.setzRingId(approvalcallbackinfo.getDfRingId());
																LOG.info("Inserting second record with the transaction ID:{} for incoming transaction with exisiting fuzeSiteId and active projectStatus",siteChangeApprovalObj1.getTransactionId());
																LOG.info("The second transaction:{} in SiteChangeApproval table has changeType as {} and changeReason as {}",siteChangeApprovalObj1.getTransactionId(),change,reason);
																siteChangeApprovalRepository.save(siteChangeApprovalObj1);

																tempSiteNfid=siteInf.getSiteNfId();
																tempSiteId= siteInf.getSiteId();
															}
														}
														else
														{
															Site siteObj = siteFuzeSiteIdList.get(0);
																LOG.info(
																		"single record found in the site table with the provided fuzeSiteId: {}",
																		fuzeSiteId);
																siteRepo.updateSiteRemoveFlag(fuzeSiteId);
																siteSeqId = customQueriesRepository.getSequenceMaxValueForSiteChange();
																SiteChangeApproval siteChangeApprovalObj1 = prepareSiteChangeApprovalObj(approvalcallbackinfo, siteManagementRequest, siteSeqId, siteNfId, null, null, siteId, clusterId, needDate, telcoRoomReadyDate, poryear, porsite, telcoRoomReadyActDate, telcoRoomReadyEstDate);

									                    	siteChangeApprovalObj1.setTransactionId(approvalcallbackinfo.getTransactionId()+"-2");
									                    	siteChangeApprovalObj1.setChangeType(change);
									                    	siteChangeApprovalObj1.setChangeReason(reason);
									                    	siteChangeApprovalObj1.setSiteNfId(siteObj.getSiteNfId());
									                    	siteChangeApprovalObj1.setSiteId(siteObj.getSiteId());
															siteChangeApprovalObj1.setMarketName((primaryMarket != null) ? primaryMarket.toUpperCase() : null);
															siteChangeApprovalObj1.setzRingId(approvalcallbackinfo.getDfRingId());
									                    	LOG.info("Inserting second record with the transaction ID:{} for incoming transaction with exisiting fuzeSiteId and active projectStatus",siteChangeApprovalObj1.getTransactionId());
									                    	LOG.info("The second transaction:{} in SiteChangeApproval table has changeType as {} and changeReason as {}",siteChangeApprovalObj1.getTransactionId(),change,reason);
									                    	siteChangeApprovalRepository.save(siteChangeApprovalObj1);
									                    	 response = prepareResponse(
																		SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
																		//"fuzeSiteId matches with only one site in cofee:" + "{ "
																		"fuzeSiteId matches with one Fuze Project in cofee: { "
																				+ siteObj.getSiteNfId() + "}",
																		response);
																responseList.add(response);
																tempSiteNfid=siteObj.getSiteNfId(); //Ntscr-22847
																tempSiteId= siteObj.getSiteId(); //Ntscr-22847
														}
													}
													
											} else {
												LOG.info("The incoming transaction has a non-active project status");
												response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
														"ProjectStatus is not active",
														response);
												responseList.add(response);
												continue;
											}
										} else {
											
											
											LOG.info("No rows returned, so new NFID will be needed");
											response.setIsitNewSiteNfId(true);
										}

									}

									}
								// String siteNfId = null

								/*if (site != null && site.getSiteId() > 0) {
									siteId = site.getSiteId();
									existingSiteNfid = site.getSiteNfId();
									LOG.info("{} Site Record is exist for the given siteName : {}", siteId, siteName);
								}*/
								//Ntscr-22847
								if(tempSiteNfid!=null && tempSiteId!=null) {
									siteId = tempSiteId;
									existingSiteNfid = tempSiteNfid;
								}
								//Ntscr-22847 //end
								else {
									siteId = customQueriesRepository.getSequenceMaxValueForSite();

									LOG.info(
											"calling getSiteNFId for transactionId:{}, clusterId:{}, clusterNfId:{}, siteName:{}, siteId:{}, piUrl:{}, market: {}",
											approvalcallbackinfo.getTransactionId(), clusterId, clusterNfId, siteName,
											siteId, piUrl, approvalcallbackinfo.getMarketName());
									if ("IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {

										siteChangeApprovalObj = updateApprovalInfo(approvalcallbackinfo, siteChangeApprovalObj);

											siteChangeApprovalObj.setSiteStatus(approvalcallbackinfo.getSiteStatus());
											siteChangeApprovalObj.setSiteLat(approvalcallbackinfo.getSiteLat());
											siteChangeApprovalObj.setSiteLong(approvalcallbackinfo.getSiteLong());
											
										String respo = 	callSppCreateMgmt(siteChangeApprovalObj, siteManagementRequest.getCallbackURL(), approvalcallbackinfo.getNfid(), approvalcallbackinfo.getFiberCount());

										try {
											//Fixed fuze failure here addedjson array object NTSCR-38419
											JSONObject json = new JSONObject(respo);
											
											JSONArray jsonArray = (JSONArray) json.get("request");
											JSONObject jsonString = new JSONObject(jsonArray.get(0).toString());
											//added satus Info
											siteNfId = jsonString.getString("siteNfid");
											statusInfo = jsonString.getString("statusInfo");
											statusFranchise = jsonString.getString("status");
											LOG.info("REtrieveed the sitenfid from /callSppCreateMgmt api--------"+siteNfId);
											
										}catch (Exception e) {
											LOG.error(e.getMessage());
											LOG.info("Invalid SiteNfid  or no SiteNFid returned from FTTCS {}",e.getMessage());
										}
										
									}else {
										String siteNameUpperCase = StringUtils.upperCase(siteName); // NTSCR-53061
										
										if(isGrandChild)
										{// grand child case the parent site info is used instead of the cluster Info
											LOG.info("Grand Child Case using parent Site instead of cluster info. Parent [SiteID: {}, NfId: {}, Name: {} ]",
													parentSite.getSiteId(), parentSite.getSiteNfId(), parentSite.getSiteName());
											siteNfId = rc.generateChildNfId(transactionId, parentSite.getSiteId(), parentSite.getSiteNfId(), siteId,
													getNFUrl, StringUtils.upperCase(parentSite.getSiteName()), siteNameUpperCase, isGrandChild);
										}
										else {
											siteNfId = rc.generateChildNfId(transactionId, clusterId, clusterNfId, siteId,
													getNFUrl, StringUtils.upperCase(clusterName), siteNameUpperCase, isGrandChild);
										}
									}
									if (siteNfId != null) {
										LOG.info(
												"calling getSiteNFId for transactionId:{}, clusterId:{}, clusterNfId:{}, siteName:{}, siteId:{}, piUrl:{}, market: {} returned site_nfid:{}",
												approvalcallbackinfo.getTransactionId(), clusterId, clusterNfId,
												siteName, siteId, piUrl, siteNfId,
												approvalcallbackinfo.getMarketName());
									} else {
										LOG.info(
												"calling getSiteNFId for transactionId:{}, clusterId:{}, clusterNfId:{}, siteName:{}, siteId:{}, piUrl:{}, market: {} returned NULL site_nfid",
												approvalcallbackinfo.getTransactionId(), clusterId, clusterNfId,
												siteName, siteId, piUrl, approvalcallbackinfo.getMarketName());
									}

									newSiteNfid = siteNfId;
									if (StringUtils.isBlank(existingSiteNfid)) {
										approvalcallbackinfo.setNfid(siteNfId); // site_nfid is required for approval if
																				// change type is Add
									} else {
										approvalcallbackinfo.setNfid(existingSiteNfid);
									}

								}

								if (StringUtils.isBlank(existingSiteNfid) && StringUtils.isBlank(newSiteNfid)) {
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Unable to find existing site Nfid or create a new Site Nfid. ", response);
									responseList.add(response);
									continue;
								}

								/*
								 * if(StringUtils.isBlank(fuzeProjectId) &&
								 * StringUtils.isNotBlank(existingSiteNfid)) { response =
								 * prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
								 * "Site already exists. No project id passed in ", response);
								 * responseList.add(response); continue; }
								 */

								// Integer siteSeqId =
								// customQueriesRepository.getSequenceMaxValueForSiteChange()
								LOG.info(
										":::::::::::::::::::::::::::::::Calling ClliCode service:::::::::::::::::::::::::::::::");
								String zClliCode = null;
								try {
									zClliCode = getClliCode(approvalcallbackinfo);
								} catch (Exception e) {
									LOG.info(" Exception in service class for obtaining the Cllicode::: {}",
											e.getMessage());
								}
								// saving the record into Interim table SITE CHANGE APPROVAL
								// SiteChangeApproval siteChangeApprovalObj =
								// prepareSiteChangeApprovalObj(approvalcallbackinfo,siteManagementRequest,siteSeqId,siteNfId,null,
								// null,siteId,clusterId,needDate,telcoRoomReadyDate,poryear,porsite,telcoRoomReadyActDate,
								// telcoRoomReadyEstDate)

								if (StringUtils.isBlank(existingSiteNfid)) {
									siteChangeApprovalObj.setSiteNfId(siteNfId);
								} else {
									siteChangeApprovalObj.setSiteNfId(existingSiteNfid);
								}
								String projectStatus = approvalcallbackinfo.getProjectStatus();
//								if (!"true".equalsIgnoreCase(projectStatus)) {
//
//									LOG.info("projectStatus :{} - siteChangeApprovalObj.getSiteNfId() : {}",
//											projectStatus, siteChangeApprovalObj.getSiteNfId());
//
//									List<String> bonitaCaseId = siteRepo
//											.findBonitaCaseId(siteChangeApprovalObj.getSiteNfId());
//									for (String caseid : bonitaCaseId) {
//
//										String bonitaURL = getWfmProperty("BONITA_TASK_INFO") + "/" + caseid
//												+ "/Review Site Change";
//										LOG.info("From SMService caseid : {} : bonitaURL : {}", caseid, bonitaURL);
//
//										String resp = callWebService(bonitaURL, "GET", "");
//										JSONObject json = new JSONObject(resp);
//										if (LOG.isInfoEnabled())
//											LOG.info("From SMService  json: {} :name: {} :ready: {}", json,
//													json.optString("name"), json.optString("ready"));
//
//										if (("Review Site Change".equalsIgnoreCase(json.optString("name")))
//												&& ("ready".equalsIgnoreCase(json.optString("state")))) {
//
//											BonitaCompletedTaskResponseBean bonitataskres = processBonitaCompleteTask(
//													caseid, transactionIds);
//
//											LOG.info("From SMService  bonitataskres : {}", bonitataskres);
//
//										}
//
//									}
//								}

								siteChangeApprovalObj.setSiteId(siteId);
								siteChangeApprovalObj.setClusterId(clusterId);
								siteChangeApprovalObj.setMarketName((primaryMarket != null ) ? primaryMarket.toUpperCase() : null);
								siteChangeApprovalObj.setClusterName((clusterName != null ) ? clusterName.toUpperCase() : null);
								siteChangeApprovalObj.setClusterNfId(clusterNfId);
								siteChangeApprovalObj.setZlocClliCode(zClliCode);
								siteChangeApprovalObj.setzRingId(zRingId);

								if (approvalcallbackinfo.getProjectStatus() != null) {
									siteChangeApprovalObj.setProjectStatus(approvalcallbackinfo.getProjectStatus());
								}

								if (strandCount != null) {
									siteChangeApprovalObj.setVzwStrandCount(strandCount);
								}
								LOG.info("siteStatus:::  {}", approvalcallbackinfo.getSiteStatus());
								LOG.info("about to call vmb if sarfsite.........");
								try {
									if("SarfSite".equalsIgnoreCase(
											approvalcallbackinfo.getSiteStatus()) && approvalcallbackinfo.getSiteStatus()!=null && ("IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) ) {
									 // VMB service needs to call here from CoffeeEngg repo 
									 SiteManagementRequest request = new SiteManagementRequest();
									 request.setCallbackURL(siteManagementRequest.getCallbackURL());
									 request.setapprovalcallbackinfo(approvalcallbackinfoList);
									 request.setApprovalCallbackURL(siteManagementRequest.getCallbackURL());
									 
									 ObjectMapper mapper = new ObjectMapper();
						                String requestJson = "";
						                try {
										requestJson = 	mapper.writeValueAsString(request);
										} catch (JsonProcessingException e) {
											//logger.error(e.getMessage());
										}
						               // LOG.info("siteNfIdfrom /callsp..publish to VMB....+"+siteNfId);
									// publishSiteDemandTransactionstoVMB(requestJson,siteNfId,approvalcallbackinfo.getChangeType());
						                if(siteNfId!=null && siteNfId!="") {
						                	vmbMilestoneService.publishSiteDemandTransactionstoVMB(requestJson,
							                		siteNfId, siteChangeApprovalObj.getChangeType());
							                LOG.info("Site PUSHed to VMB....");
						                }
						                
								 }
									
									
								}catch(Exception e){
									LOG.info("Excepiton in vmb push.... catched exception,flow willl continue"+e.getMessage());
								}
								String status = null;
								if (siteStatus == null) {
									status = "PRE-CANDIDATE";
								} else {
									status = overWriteSiteStatusValue(siteStatus.toUpperCase());
								}
								LOG.info("siteStatus after Overwrite ::: {}", status);
								siteChangeApprovalObj.setSiteStatus(status);
								siteChangeApprovalObj.setCancelReason(null);
								
								
								if (!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
											
								// Start NTSCR 16761 add locus ID
								String locusId = locusService.getLocus(approvalcallbackinfo);
								siteChangeApprovalObj.setLocusId(locusId);
								// End of NTSCR 16761 add locus ID
								}
								LOG.info("approvalcallbackinfo.getRtoFiberActDt()...."+approvalcallbackinfo.getRtoFiberActDt());
								try {
									//NTSCR-82539 changes
									String readyToOrder=approvalcallbackinfo.getRtoFiberActDt();
									String readyToActual="";
									
			//						SiteFuzeProject siteFuzeProject = sitefuzeProjectRepo.findByFuzeDetails(siteNfId, fuzeProjectId);
									SiteFuzeProject siteFuzeProject = sitefuzeProjectRepo.findByFuzeDetails(approvalcallbackinfo.getNfid(), fuzeProjectId);
									if (siteFuzeProject!=null)
										{ readyToActual = siteFuzeProject.getReadyToAct();
									
										if(readyToActual!=null && !readyToActual.isEmpty() && ("xx-01-01 00:00:00").equals(readyToActual)) {
											
												readyToActual=null;
											}
										 
										}
									else {
										readyToActual=null;
									}
							
									if(readyToOrder !=null && !readyToOrder.isEmpty() && (readyToOrder.equals("01/01/1900")||readyToOrder.equals("1/1/1900")))
									{
										
										readyToOrder=null;
									}
									
									
									
								
									
									
									
									
									
									//if(approvalcallbackinfo.getRtoFiberActDt()!=null && approvalcallbackinfo.getRtoFiberActDt()!="") {
									if((readyToActual==null || readyToActual=="") &&readyToOrder!=null && readyToOrder!="") {
										String value=getWfmProperty("ONEFIBER_RTO_ACK_TASK");
										LOG.info("ONEFIBER_RTO_ACK_TASK ...task call......value.."+value);
										if(value.equalsIgnoreCase("ON")) {
											//approvalcallbackinfo.setRtoFiberActDt(approvalcallbackinfo.getRtoFiberActDt());
											//approvalcallbackinfo.setrto
											String rtoTaskFlag = "true";
											ApprovalPIJsonResponse piCallResponse = rc.getApprovalPIJsonResponse(piUrl, approvalcallbackinfo, siteSeqId,
													siteManagementRequest, site,rtoTaskFlag);
											String approvalnfid=piCallResponse.getNfID();
											siteChangeApprovalObj.setApprovalNfId(approvalnfid);
										}
										
									}
								}catch(Exception e) {
									e.printStackTrace();
								}
								SiteChangeApproval approval = siteChangeApprovalRepository.save(siteChangeApprovalObj);
								LOG.info("Record insertion completed in Site Change Approval table ..");
								siteChangeApprovalRepository.save(approval);
								
								
								getGolbalSiteId().put(index, siteId);
								if (StringUtils.isBlank(fuzeProjectId) && StringUtils.isNotBlank(newSiteNfid)) {
									
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
											"New site added. No project id passed in ", response);
									responseList.add(response);
									
									
									continue;
								}
								//NTSCR-38419 seting frnachise status info
								try {
									LOG.info("print statusFranchise...."+statusFranchise);
									if ("Failure".equalsIgnoreCase(statusFranchise)) {
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												statusInfo, response);
										responseList.add(response);
									
										continue;
									}	
								}catch(Exception e) {
									LOG.info("ERROR /callsppcreatemanegemtn status Info fetching"+e.getMessage());
								}
								

								if (StringUtils.isNotBlank(fuzeProjectId)) {
									response = associateFuzeProjectInNfTree(approvalcallbackinfo, transactionId,
											siteId, fuzeProjectId, existingSiteNfid, newSiteNfid);
								}
								
								if(isGrandChild) {
									 response.setIsGrandChildNfid("Y");
									// response.setSiteNfId(siteNfId);
									
								}

								if (response != null) {
									responseList.add(response);
									continue;
								}

							} else {
								LOG.info("Market Name {} is Invalid", marketName);
								// throw error and send response back
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Invalid MarketName:" + marketName, response);
								responseList.add(response);
								continue;
							}
						} else {
							// error out changeReason is a wrong value
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Invalid ChangeReason", response);
							responseList.add(response);
							continue;
						}
						
						
						
					}
					

//***********************ChangeType Change***********************************//
					if (approvalcallbackinfo.getChangeType().matches("Change")) {
						String changeType = approvalcallbackinfo.getChangeType();
						String clusterName = approvalcallbackinfo.getClusterName();
						LOG.info("ClusterName set to ::: {}", clusterName);
						String clusterNfId = approvalcallbackinfo.getClusterNfId();
						LOG.info("ClusterNfid set to ::: {}", clusterNfId);
						LOG.info("changeReason ******* ::: {}", approvalcallbackinfo.getChangeReason());
						// siteChangeApproval =
						// rc.copyApprovalCallbackInfoToSiteChangeApproval(approvalcallbackinfo)

						if (changeType.equals("Change") && !approvalcallbackinfo.getChangeReason()
								.matches("Need By Date Change|Hub Mapping Change|Site Move|Telco Room Ready Change")) {
		
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Invalid change reason:" + approvalcallbackinfo.getChangeReason(), response);
							responseList.add(response);
							continue;
						}
						
						
						/* Need by Date Validation Disabled NTSCR-34255
						if (changeType.equals("Change")
								&& "Need By Date Change".equalsIgnoreCase(approvalcallbackinfo.getChangeReason())) {

							// NTSCR-3958: CE should allow Null values for needByDate
							if (needByDate != null && !needByDate.isEmpty()) {
								DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
								Date todayDate = new Date();
								Date todayWithZeroTime = formatter.parse(formatter.format(todayDate));
								LOG.info("current Date ::: {} needDate ::: {}", todayWithZeroTime, needByDate);
								Date needByDateValue = new Date(needByDate);
								if (needByDateValue.compareTo(todayWithZeroTime) < 0) {
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Need By Date Change cannot be less than current date :", response);
									responseList.add(response);
									continue;
								}
							}
						}*/

						if (approvalcallbackinfo.getNfid() == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NfIid is required", response);
							responseList.add(response);
							continue;
						}
						
						
						if("IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
							 BigInteger strandCount = null;
							 Site site = null;
							 LOG.info("fiber count");
									if (StringUtils.isNotBlank(approvalcallbackinfo.getFiberCount())) {
										Long strandCountValue = Long.parseLong(approvalcallbackinfo.getFiberCount());
										strandCount = BigInteger.valueOf(strandCountValue);
									}
                                  LOG.info("Change Txn the logg changeType:::" + changeType + ": approvalcallbackinfo.getNfid() :"
											+ approvalcallbackinfo.getNfid());
                                   siteChangeApprovalObj = updateApprovalInfo(approvalcallbackinfo, siteChangeApprovalObj);

									siteChangeApprovalObj.setSiteStatus(approvalcallbackinfo.getSiteStatus());
									siteChangeApprovalObj.setSiteLat(approvalcallbackinfo.getSiteLat());
									siteChangeApprovalObj.setSiteLong(approvalcallbackinfo.getSiteLong());
								LOG.info("before call supp");	
								String respo = 	callSppCreateMgmt(siteChangeApprovalObj, siteManagementRequest.getCallbackURL(), approvalcallbackinfo.getNfid(), approvalcallbackinfo.getFiberCount());

								try {JSONObject json = new JSONObject(respo);JSONArray jsonArray = (JSONArray) json.get("request");
									JSONObject jsonString = new JSONObject(jsonArray.get(0).toString());siteNfId = jsonString.getString("siteNfid");site.setSiteNfId(siteNfId);
							
									
								}catch (Exception e) {
									LOG.error(e.getMessage());
									LOG.info("Invalid SiteNfid returned from FTTCS {}",e.getMessage());
								}
								LOG.error("Invalid SiteNfid returned from FTTCS");
								
							
							Integer siteChangeSeq = null;
	                         
							siteChangeSeq = customQueriesRepository.getSequenceMaxValueForSiteChange();
							LOG.info("Site Change Seq Id generated::: {}", siteChangeSeq);
							siteChangeApprovalObj.setTranTime(new Timestamp(System.currentTimeMillis()));
							siteChangeApprovalObj.setReceivedDate(new Date());
							siteChangeApprovalObj.setSiteNfId(approvalcallbackinfo.getNfid());
							siteChangeApprovalObj.setSiteId(siteId);
							siteChangeApprovalObj.setSiteChangeId(siteChangeSeq);
							siteChangeApprovalObj.setClusterName(clusterName.toUpperCase());
							siteChangeApprovalObj.setClusterNfId(clusterNfId);
							if (approvalcallbackinfo.getProjectStatus() != null) {siteChangeApprovalObj.setProjectStatus(approvalcallbackinfo.getProjectStatus());}
							if (strandCount != null) {siteChangeApprovalObj.setVzwStrandCount(strandCount);}
							siteChangeApprovalObj.setSiteStatus(approvalcallbackinfo.getSiteStatus());
							siteChangeApprovalObj.setTelcoRoomReadyAct(telcoRoomReadyActDate);
							siteChangeApprovalObj.setTelcoRoomReadyEst(telcoRoomReadyEstDate);

							siteChangeApprovalRepository.save(siteChangeApprovalObj);
						}else {
							
						
						
						
						Site site = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
						
						 LOG.info("came here for test1");
						if (site == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NFID " + approvalcallbackinfo.getNfid() + " does not exist", response);
							responseList.add(response);
							continue;
						}
						
						String siteCategoryType = approvalcallbackinfo.getSiteCategoryType();
						String siteCategorySubType = approvalcallbackinfo.getSiteCategorySubType();
						
	                    String fuzeProjectId = approvalcallbackinfo.getFuzeProjectId();
	                    LOG.info("came here for test2");
						Long fuzeProj = Long.parseLong(fuzeProjectId);
						BigInteger fuzeProjId = BigInteger.valueOf(fuzeProj);
						List<SiteFuzeProject> fuzePojectIdDb = sitefuzeProjectRepo.findByFuzeProjectId(fuzeProjId);
						
                               if((fuzePojectIdDb.size()>0) )

							
								
								{
							
                            	   LOG.info("came here for test3");
								
								boolean RejectUpdate = updateRejectFields(approvalcallbackinfo);
							/*	if(RejectUpdate==true) {
									LOG.info("Updated Reject Fields :: true");
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,"Site UnRejected", response);
									responseList.add(response);
									continue;
								}*/
							
							
						}

                            
						if (siteCategoryType != null) {
							LOG.info(
									"siteCategoryType is not null condition inside Change :::check with siteRef table: ");

							List<SiteTypeRef> siteTypeRefList = siteTypeRefRepo
									.findBySiteCategoryTypeIgnoreCaseAndSiteCategorySubTypeIgnoreCase(siteCategoryType,
											siteCategorySubType);
							if (siteTypeRefList != null && !siteTypeRefList.isEmpty()) {
								LOG.info("siteCategory and siteCategorySubType values are valid ");
							} else {
								LOG.info(
										" siteCategoryType and siteSubCategory value not exist in siteType Ref table returning error ");
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Invalid siteCategoryType/siteSubCategoryType:" + siteCategoryType + ","
												+ siteCategorySubType,
										response);
								responseList.add(response);
								continue;
							}
						}

					
						
						//only fir OOF
						if ("Change".equalsIgnoreCase(changeType)
								&& reason.equalsIgnoreCase(approvalcallbackinfo.getChangeReason())) {

							String technologyInd = approvalcallbackinfo.getTechnologyInd();
							String technologyStatus = getWfmProperty("ONEFIBER_TECHNOLOGY_REQ_IND_STATUS");
							LOG.info("ONEFIBER_TECHNOLOGY_REQ_IND_STATUS Value in siteMove option ::: {}",
									technologyStatus);

							if ("ON".equalsIgnoreCase(technologyStatus)) {
								String technologyIndValues = getWfmProperty("ONEFIBER_TECHNOLOGY_IND_VALUES");
								LOG.info("technologyIndValues ::: {}", technologyIndValues);

								if (technologyInd != null && !technologyInd.equals("")) {
									if (technologyIndValues.contains(technologyInd)) {

										if (!technologyInd.matches("4G|5G")) {
											LOG.info(
													"multiple technologyValues or no technologyInd value recorded for sitemove change");
											response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
													"Invalid technologyInd:" + technologyInd, response);
											responseList.add(response);
											continue;
										}

										LOG.info("technologyInd value is:: {}", technologyInd);
									} else {
										LOG.info("technologyValues and technologyInd doesnot match so throwing error");
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												"Invalid technologyInd:" + technologyInd, response);
										responseList.add(response);
										continue;
									}
								} else {
									LOG.info(
											" technologyInd is mandatory should not be null When technologyStatus is ON for site move");
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Invalid technologyInd Value :" + technologyInd, response);
									responseList.add(response);
									continue;

								}
							}

						}
						
						
						if (approvalcallbackinfo.getSiteLat() == null || approvalcallbackinfo.getSiteLat().toString().isEmpty()
								|| approvalcallbackinfo.getSiteLong() == null || approvalcallbackinfo.getSiteLong().toString().isEmpty()) {
							LOG.info("Transaction is rejected");
							ProcessErrorRequest per = createProcessErrReq(approvalcallbackinfo.getNfid(),
									approvalcallbackinfo.getTransactionId(), "Lat/Long Empty",
									"Transaction Rejected because  lat/Long are empty");
							processErrorInfoService.saveErrorInfo(per);
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"Lat/Long must be provided", response);
							responseList.add(response);
							continue;
						}
						
						
						/*
						 * changes from NTSCR-18793 have been relaxed & this validation is
						 * applied except for Hub mapping change since NTSCR-30708
						 */
						//NTSCR-18793
						
						String marketName=null;

						
						if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())){
							marketName = clusterRepo.getMarketDetailsByClusterId(approvalcallbackinfo.getNfid());
						
							LOG.info("market Name::" + marketName);
							
						//	marketName= "HOUSTON, TX";
							
							if( marketName == null ||marketName.equalsIgnoreCase("")  || "null".equalsIgnoreCase(marketName) ) {
								marketName  = site.getMarketName();
								LOG.info("market Name::" + marketName);

							}
							
							

						}
						
						marketNameNew = marketName;
						
						
						

						/*	// 38419
						if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())){
							marketName	 = locusService.getMarketName(String.valueOf(approvalcallbackinfo.getSiteLat()),String.valueOf(approvalcallbackinfo.getSiteLong()),"getMartNameByLatandLong");
							LOG.info("market Name::" + marketName);
							if(marketName.contains("Region")) {
								marketName =siteRepo.findMarketName(site.getSiteNfId());
							}
							
							LOG.info("market Name::" + marketName);
							 Market  primaryMarket = marketRepo.findById(marketName.toUpperCase()).orElse(null);
							
							 
							// Log.info("harshu primary Name"+primaryMarket.getPrimaryMarket());
							 if(marketName.equalsIgnoreCase("") || marketName == null || "null".equalsIgnoreCase(marketName) || marketName.contains("Region")) {
									
									marketName	 = locusService.getMarketName(String.valueOf(approvalcallbackinfo.getSiteLat()),String.valueOf(approvalcallbackinfo.getSiteLong()),"getProposedMartNameByLatLong");
									LOG.info("market Name::" + marketName);
									
									if(marketName.equalsIgnoreCase("") || marketName == null || "null".equalsIgnoreCase(marketName) ) {
									response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
											"Cannot derive MarketName with given lat/long values:" + marketName, response);
									responseList.add(response);
									continue;
									}
							}
							LOG.info("market Name::"+primaryMarket.getPrimaryMarket());
							Market  sitePrimaryMarket = marketRepo.findById(site.getMarketName().toUpperCase()).orElse(null);
							if(!marketName.equalsIgnoreCase(site.getMarketName()) && !marketName.equalsIgnoreCase(sitePrimaryMarket.getPrimaryMarket().toString())) {
								
								
								
								
							if(!(primaryMarket.getPrimaryMarket().equalsIgnoreCase(sitePrimaryMarket.getPrimaryMarket().toString()))){
								
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Changed Lat/Long is in a market that is different from the existing site" + marketName, response);
								responseList.add(response);
								continue;
							}
							}
						} */
						

						approvalcallbackinfo.setMarketName(marketName);
						
						LOG.info("came here approval call info"+approvalcallbackinfo.getMarketName());
						
						Cluster cluster = null;
						
						//only fir OOF
						if(clusterNfId!= null && !clusterNfId.isEmpty()) {
							cluster = clusterRepo.getClusterDetailsByClusterId(clusterNfId);
							LOG.info(clusterNfidTemplate,clusterNfId);
						}
						else
							cluster = getClusterIfExistsWithinMarket(approvalcallbackinfo.getMarketName(), approvalcallbackinfo.getClusterName());
						
						
						//only fir OOF
						if ("Change".equalsIgnoreCase(changeType)
								&& "Hub Mapping Change".equalsIgnoreCase(approvalcallbackinfo.getChangeReason())) {
							//Cluster cluster = null;

							// Integer clusterId = 0
						//	String marketName = null;
							String clustMarketName = null;
							//List<Cluster> clusterList = clusterRepo.findByMarketNameIgnoreCaseAndClusterNameIgnoreCase(
								//	approvalcallbackinfo.getMarketName(), approvalcallbackinfo.getClusterName());
							
							/* the below validation should not happen for hub mapping
							if(cluster!=null && !(cluster.getClusterId().toString().equals(site.getClusterId().toString()))) {
								LOG.info("__Cluster ID: {}___",cluster.getClusterId());
								response = addFailureResponseToListAndProcessErrorInfo(responseList, approvalcallbackinfo, response);
								continue;								
							}*/

							List<Cluster> clusterByNameList = clusterRepo
									.findByClusterNameIgnoreCase(approvalcallbackinfo.getClusterName());

							//if (clusterList != null && !clusterList.isEmpty()) {
							//	cluster = clusterList.get(0);
							//}

							if (cluster != null && cluster.getClusterId() > 0) {
								clusterId = cluster.getClusterId();
								clusterNfId = cluster.getClusterNfId();
								clusterName = cluster.getClusterName();
								marketName = cluster.getMarketName();
								LOG.info(clusterId
										+ " Record is exist in onet_cluster table for the the given MarketName: "
										+ marketName + " and clusterNfId: " + clusterNfId);
								LOG.info(" clusterName from Cluster Table for the given clusterId is : " + clusterName);

								LOG.info(" Hub Mapping Change MarketName is :::: {}",
										approvalcallbackinfo.getMarketName());
								LOG.info(" Hub Mapping Change ClusterName is :::: {}",
										approvalcallbackinfo.getClusterName());

							} else if (clusterByNameList != null && !clusterByNameList.isEmpty()) {

								Cluster[] myArray = new Cluster[clusterByNameList.size()];
								for (int i = 0; i < clusterByNameList.size(); i++) {
									myArray[i] = clusterByNameList.get(i);
									LOG.info("myArray of clust market Names::: {}", myArray[i].getMarketName());
									if (i == 0) {
										clustMarketName = myArray[i].getMarketName();
									} else {
										clustMarketName = clustMarketName + "," + myArray[i].getMarketName();
									}
								}
								LOG.info("Given Hub is present in diff markets in COE");
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Hub in COE is present in this market List: " + clustMarketName
												+ " but not in the market Fuze provided: "
												+ approvalcallbackinfo.getMarketName(),
										response);
								responseList.add(response);

								continue;

							} else {

								LOG.info(
										"Given ClusterNfId value is NOT exist in CLUSTER table so it's a failing condition");
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Hub not found with the provided name:" + approvalcallbackinfo.getClusterName(),
										response);
								responseList.add(response);
								continue;

							}
                            if((approvalcallbackinfo.getFranchiseFlag()==null || approvalcallbackinfo.getFranchiseFlag()=="" || "OOF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag()))){
							 
                            //	Site site = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
                            	
                            	if (site != null && site.getMarketName() != null) {
								
								//NTSCR-18801
								String sharedMarket=null;
								String siteMarketName = site.getMarketName();			
								String query = "select shared_market from wfm_nf.nf_onet_market where market_name =?";
								List<String> th = jdbcTemplate.query(query, new Object[] {siteMarketName },
										new SingleColumnRowMapper<String>(String.class));
								
								LOG.info("before"+sharedMarket);
								if (!th.isEmpty()) {
									sharedMarket = th.get(0);}
								
								if(sharedMarket==null) {
									sharedMarket=siteMarketName;
								}
								LOG.info("after"+sharedMarket);
								String query1 = "select nvl(primary_market,market_name) from wfm_nf.nf_onet_market where market_name ='"+marketName+"'";
								String primaryMarket = jdbcTemplate.queryForObject(query1, String.class);
								
								String query2 = "select nvl(primary_market,market_name) from wfm_nf.nf_onet_market where market_name ='"+siteMarketName+"'";
								String primaryMarket2 = jdbcTemplate.queryForObject(query2, String.class);
								//								
								if (siteMarketName.equalsIgnoreCase(marketName)) {
									LOG.info(" site table MarketName and incoming MarketName matched");

									if (site.getClusterName() != null && site.getClusterName()
											.equalsIgnoreCase(clusterName)) {
										LOG.info(
												" 1f site table ClusterName and incoming clusterName got matched for the given NFId::: {}",
												approvalcallbackinfo.getNfid());
										clusterNfId = cluster.getClusterNfId();
										siteNfId = site.getSiteNfId();
										
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
												"Asked for a hub change but the site is already associated with the new hub provided",
												response);
										response.setSiteNfId(siteNfId);
										response.setClusterNfId(clusterNfId);
										responseList.add(response);
										continue;
									}
								} 
								else if(sharedMarket.equalsIgnoreCase(approvalcallbackinfo.getMarketName())) {
									LOG.info(" site table MarketName matches with shared market");

									if (site.getClusterName() != null && site.getClusterName()
											.equalsIgnoreCase(clusterName)) {
										LOG.info(
												" 1f site table ClusterName and incoming clusterName got matched for the given NFId::: {}",
												approvalcallbackinfo.getNfid());
										clusterNfId = cluster.getClusterNfId();
										siteNfId = site.getSiteNfId();
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
												"Hub Change success for shared market",
												response);
										response.setSiteNfId(siteNfId);
										response.setClusterNfId(clusterNfId);
										responseList.add(response);
									}
								}
								else if (primaryMarket.equalsIgnoreCase(site.getMarketName()) || primaryMarket2.equalsIgnoreCase(marketName)) {
									LOG.info(" site table MarketName matches with primary market");

									if (site.getClusterName() != null && site.getClusterName()
											.equalsIgnoreCase(clusterName)) {
										LOG.info(
												" 1f site table ClusterName and incoming clusterName got matched for the given NFId::: {}",
												approvalcallbackinfo.getNfid());
										clusterNfId = cluster.getClusterNfId();
										siteNfId = site.getSiteNfId();
				
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS,
												"Hub Change success for split market",
												response);
										response.setSiteNfId(siteNfId);
										response.setClusterNfId(clusterNfId);
										responseList.add(response);
									}
								}
								else {
									if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
										LOG.info("site's MarketName and Incoming MarketName are not equal ::: ");
										response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
												"Market of SiteNfId is " + site.getMarketName()
														+ " and is different from Incoming market name: "
														+ marketName,
												response);
										responseList.add(response);
										continue;
									}
									
								}
							}
							}
						}
						else {
							if(!"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {
							//as of NTSCR-30708 this validation is relaxed and not applied in Hub Mapping Change requests
							if((cluster==null)||(cluster!=null && !(cluster.getClusterId().toString().equals(site.getClusterId().toString())))) {
								/* response = */ addFailureResponseToListAndProcessErrorInfo(responseList, approvalcallbackinfo, response);
								//continue;
							}	
							}
						}
						
//						if(cluster==null) {
//							response = addFailureResponseToListAndProcessErrorInfo(responseList, approvalcallbackinfo, response);
//							continue;
//							
//						}
						
						if( !"IF".equalsIgnoreCase(approvalcallbackinfo.getFranchiseFlag())) {

						

						
						if ("Change".equalsIgnoreCase(changeType)
								&& "Telco Room Ready Change".equalsIgnoreCase(approvalcallbackinfo.getChangeReason())) {

							DateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
							Date todayDate = new Date();
							Date todayWithZeroTime = formatter.parse(formatter.format(todayDate));
						}

						
						//only fir OOF
						List<SiteChangeApproval> siteChangeApprovals = siteChangeApprovalRepository
								.findBysiteNfId(approvalcallbackinfo.getNfid());
						for (SiteChangeApproval s : siteChangeApprovals) {
							if (s != null && (s.getPmoStatus() == null
									|| (!s.getPmoStatus().trim().toUpperCase().equalsIgnoreCase("APPROVED")
											&& !s.getPmoStatus().trim().toUpperCase().equalsIgnoreCase("REJECTED")))) {
								LOG.info("PmoStatus:: {}", s.getPmoStatus());
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED, "NFID "
										+ approvalcallbackinfo.getNfid() + " already has a pending change request",
										response);
								responseList.add(response);
								continue;
							}

						}
						}

						BigInteger strandCount = null;
					
						if (StringUtils.isNotBlank(approvalcallbackinfo.getFiberCount())) {
							Long strandCountValue = Long.parseLong(approvalcallbackinfo.getFiberCount());
							strandCount = BigInteger.valueOf(strandCountValue);
						}

						LOG.info("Change Txn the logg changeType:::" + changeType + ": approvalcallbackinfo.getNfid() :"
								+ approvalcallbackinfo.getNfid());
						
						
						
					

						if ("Change".equalsIgnoreCase(changeType)) {
							Site ste = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
							String projectStatus = siteRepo.findProjectStatusBySite(ste.getvFuzeSiteId());
                             siteId = ste.getSiteId();
							LOG.info("Change Txn the logg projectStatus:::" + projectStatus + ": ste.getvFuzeSiteId() :"
									+ ste.getvFuzeSiteId());

							if (!"true".equalsIgnoreCase(projectStatus)) {
								siteRepo.updateSiteRemoveFlag(ste.getvFuzeSiteId());

								LOG.info("Change Txn projectStatus :" + projectStatus
										+ ":approvalcallbackinfo.getNfid() :" + approvalcallbackinfo.getNfid());

								List<String> bonitaCaseId = siteRepo.findBonitaCaseId(approvalcallbackinfo.getNfid());
								for (String caseid : bonitaCaseId) {

									String bonitaURL = getWfmProperty(BONITA_TASK_INFO) + "/" + caseid
											+ "/Review Site Change";
									LOG.info("Change Txn From SMService caseid : {}: bonitaURL :{}", caseid, bonitaURL);

									String resp = callWebService(bonitaURL, "GET", "");
									JSONObject json = new JSONObject(resp);

									LOG.info("From SMService  json:" + json + ":name:" + json.optString("name")
											+ ":ready:" + json.optString("ready"));

									if (("Review Site Change".equalsIgnoreCase(json.optString("name")))
											&& ("ready".equalsIgnoreCase(json.optString("state")))) {

										BonitaCompletedTaskResponseBean bonitataskres = processBonitaCompleteTask(
												caseid, transactionIds);

										LOG.info("Change Txn  From SMService  bonitataskres : {}", bonitataskres);

									}

								}
							}
						}
						

						Integer siteChangeSeq = null;
					//	Site site = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
						siteChangeSeq = customQueriesRepository.getSequenceMaxValueForSiteChange();
						LOG.info("Site Change Seq Id generated::: {}", siteChangeSeq);
						siteChangeApprovalObj.setTranTime(new Timestamp(System.currentTimeMillis()));
						siteChangeApprovalObj.setReceivedDate(new Date());
						siteChangeApprovalObj.setSiteNfId(approvalcallbackinfo.getNfid());
						siteChangeApprovalObj.setSiteId(siteId);
						siteChangeApprovalObj.setMarketName(marketName);
						siteChangeApprovalObj.setSiteChangeId(siteChangeSeq);
						siteChangeApprovalObj.setClusterName(clusterName.toUpperCase());
						siteChangeApprovalObj.setClusterNfId(clusterNfId);
						if (approvalcallbackinfo.getProjectStatus() != null) {
							siteChangeApprovalObj.setProjectStatus(approvalcallbackinfo.getProjectStatus());
						}
						if (strandCount != null) {
							siteChangeApprovalObj.setVzwStrandCount(strandCount);
						}
						String oldSiteStatus = overWriteSiteStatusValue(site.getSiteStatus().toUpperCase());
						String incomingSiteStatus = approvalcallbackinfo.getSiteStatus();
						if (incomingSiteStatus == null) {
							incomingSiteStatus = "PRE-CANDIDATE";
						} else {
							incomingSiteStatus = overWriteSiteStatusValue(incomingSiteStatus.toUpperCase());
						}
						LOG.info("siteStatus after Overwrite ::: {}", incomingSiteStatus);
						
						Map<String,String> buildStatusMap = new HashMap<>();
						buildStatusMap.put("PRE-CANDIDATE", PropertyUtility.STOP_BUILD);
						buildStatusMap.put("LIVE",PropertyUtility.START_BUILD);
						buildStatusMap.put("PRIMARY",PropertyUtility.START_BUILD);
						LOG.info("siteStatus after Overwrite33 ::: {}", oldSiteStatus);

						
						if(!buildStatusMap.get(incomingSiteStatus).equalsIgnoreCase(buildStatusMap.get(oldSiteStatus))) {
							boolean startBuild = buildStatusMap.get(incomingSiteStatus).equalsIgnoreCase(PropertyUtility.START_BUILD);
							mailBuildActivityStatus(site,startBuild);
							LOG.info("siteStatus after Overwrite ::: {}", incomingSiteStatus);

							
						}
						try {
							

							String readyToOrder=approvalcallbackinfo.getRtoFiberActDt();
							
	//						SiteFuzeProject siteFuzeProject = sitefuzeProjectRepo.findByFuzeDetails(siteNfId, fuzeProjectId);
							SiteFuzeProject siteFuzeProject = sitefuzeProjectRepo.findByFuzeDetails(approvalcallbackinfo.getNfid(), fuzeProjectId);
							String readyToActual="";
							//Site site2 = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
							//String readyToActual = siteFuzeProject.getReadyToAct();
							//NTSCR-82539 changes
							if (siteFuzeProject!=null)
							{ readyToActual = siteFuzeProject.getReadyToAct();
							
							if(readyToActual!=null && !readyToActual.isEmpty() && ("1900-01-01 00:00:00").equals(readyToActual)) {
								
									readyToActual=null;
								}
							 
							}
						else {
							readyToActual=null;
						}
							LOG.info("readyToOrder:::::"+readyToOrder);
						
						LOG.info("readyToActual:::"+readyToActual);
						if(readyToOrder !=null && !readyToOrder.isEmpty() && (readyToOrder.equals("01/01/1900")||readyToOrder.equals("1/1/1900")))
						{
							readyToOrder=null;
						}
							
							

							if((readyToActual==null || readyToActual=="") &&readyToOrder!=null && readyToOrder!="") {

								String value=getWfmProperty("ONEFIBER_RTO_ACK_TASK");
								LOG.info("ONEFIBER_RTO_ACK_TASK ...task call........");
								if(value.equalsIgnoreCase("ON")) {
									//approvalcallbackinfo.setre
									String rtoTaskFlag="true";
									LOG.info("ONEFIBER_RTO_ACK_TASK ...task call 2........");
									approvalcallbackinfo.setRtoFiberActDt(readyToOrder);
									ApprovalPIJsonResponse piCallResponse = rc.getApprovalPIJsonResponse(piUrl, approvalcallbackinfo, siteSeqId,
											siteManagementRequest, site,rtoTaskFlag);
									String approvalnfid=piCallResponse.getNfID();
									siteChangeApprovalObj.setApprovalNfId(approvalnfid);
								}
								
							}
						}catch(Exception e) {
							
						}
						
						String dfRingId = approvalcallbackinfo.getDfRingId();
						LOG.info("change dfRingId:::: "+ dfRingId);
						siteChangeApprovalObj.setzRingId(dfRingId);
						siteChangeApprovalObj.setSiteStatus(incomingSiteStatus);
						siteChangeApprovalObj.setTelcoRoomReadyAct(telcoRoomReadyActDate);
						siteChangeApprovalObj.setTelcoRoomReadyEst(telcoRoomReadyEstDate);

						siteChangeApprovalRepository.save(siteChangeApprovalObj);
						
						}					
					}	
					
					
//***********************ChangeType Cancel***********************************//
					if (approvalcallbackinfo.getChangeType().equalsIgnoreCase("Cancel")) {
						LOG.info("**************************Change Type is cancel*******************************");
						

//						if (siteChangeApprovalObj.getChangeReason() == null) {
//							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
//									"changeReason for cancel must be at least 5 chars ", response);
//							responseList.add(response);
//							continue;
//						}

//						if (siteChangeApprovalObj.getChangeReason().length() <= 4) {
//							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
//									"changeReason for cancel must be at least 5 chars ", response);
//							responseList.add(response);
//							continue;
//						}

//						if (siteChangeApprovalObj.getChangeReason().length() >= 101) {
//							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
//									"changeReason for cancel must be less than 100 chars:"
//											+ approvalcallbackinfo.getChangeReason(),
//									response);
//							responseList.add(response);
//							continue;
//						}

//						if (siteChangeApprovalObj.getCancelReason() != null) {

//							if (siteChangeApprovalObj.getCancelReason().length() <= 4) {
//								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
//										"cancelReason for cancel must be at least 5 chars ", response);
//								responseList.add(response);
//								continue;
//							}
//
//							if (siteChangeApprovalObj.getCancelReason().length() >= 200) {
//								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
//										"cancelReason for cancel must be less than 100 chars:"
//												+ approvalcallbackinfo.getChangeReason(),
//										response);
//								responseList.add(response);
//								continue;
//							}
//						}
						if (approvalcallbackinfo.getNfid() == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NfIid is required", response);
							responseList.add(response);
							continue;
						}

						Site site = siteRepo.findBysiteNfId(approvalcallbackinfo.getNfid());
						if (site == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NFID " + approvalcallbackinfo.getNfid() + " does not exist", response);
							responseList.add(response);
							continue;
						}
						
						//NTSCR-18793
						Cluster cluster = null;
						String clusterNfId = approvalcallbackinfo.getClusterNfId();
						if(clusterNfId!= null && !clusterNfId.isEmpty()) {
							cluster = clusterRepo.getClusterDetailsByClusterId(clusterNfId);
							LOG.info(clusterNfidTemplate,clusterNfId);
						}
						else
							cluster = getClusterIfExistsWithinMarket(approvalcallbackinfo.getMarketName(), approvalcallbackinfo.getClusterName());
						
						if((cluster==null)||(cluster!=null && !(cluster.getClusterId().toString().equals(site.getClusterId().toString())))) {
							/* response = */ addFailureResponseToListAndProcessErrorInfo(responseList, approvalcallbackinfo, response);
							//continue;
							
						}

						BigInteger strandCount = null;
						if (StringUtils.isNotBlank(approvalcallbackinfo.getFiberCount())) {
							Long strandCountValue = Long.parseLong(approvalcallbackinfo.getFiberCount());
							strandCount = BigInteger.valueOf(strandCountValue);
						}

						// siteChangeApproval =
						// rc.copyApprovalCallbackInfoToSiteChangeApproval(approvalcallbackinfo);

						List<SiteChangeApproval> siteChangeApprovals = siteChangeApprovalRepository
								.findBysiteNfId(approvalcallbackinfo.getNfid());
						for (SiteChangeApproval s : siteChangeApprovals) {
							if (s != null && (s.getPmoStatus() == null
									|| (!s.getPmoStatus().trim().toUpperCase().equalsIgnoreCase("APPROVED")
											&& !s.getPmoStatus().trim().toUpperCase().equalsIgnoreCase("REJECTED")))) {
								LOG.info("PmoStatus:: " + s.getPmoStatus());
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED, "NFID "
										+ approvalcallbackinfo.getNfid() + " already has a pending change request",
										response);
								responseList.add(response);
								continue;
							}
							//NTSCR-71299////
							
							
							//LOG.info("lets cancel the sitefuze proejct.............###########33");
							Integer siteChangeSeq = null;

							siteChangeSeq = customQueriesRepository.getSequenceMaxValueForSiteChange();

							siteChangeApprovalObj.setSiteChangeId(siteChangeSeq);
							siteChangeApprovalObj.setTranTime(new Timestamp(System.currentTimeMillis()));
							siteChangeApprovalObj.setReceivedDate(new Date());
							siteChangeApprovalObj.setSiteNfId(approvalcallbackinfo.getNfid());
							siteChangeApprovalObj.setSiteId(site.getSiteId());
							if (strandCount != null) {
								siteChangeApprovalObj.setVzwStrandCount(strandCount);
							}
							/*
							 * //call store proc for cancel and then call the below API.
							 * 
							 * ApprovalPIJsonResponse approvalPIJsonResponse =
							 * rc.getApprovalPIJsonResponse(piUrl, approvalcallbackinfo, siteChangeSeq,
							 * siteManagementRequest, site);
							 * 
							 * 
							 * siteChangeApprovalObj.setClusterName(approvalcallbackinfo.getClusterName().
							 * toUpperCase());
							 * siteChangeApprovalObj.setClusterNfId(approvalcallbackinfo.getClusterNfId());
							 * 
							 * if (approvalPIJsonResponse != null && approvalPIJsonResponse.getStatusCode()
							 * == 0) {
							 * 
							 * 
							 * if (approvalPIJsonResponse.getNfID() == null ||
							 * approvalPIJsonResponse.getNfID().isEmpty()) { LOG.
							 * info("ApprovalNfid is null or Empty from the PI Response though the statusCode is 0, so sending an email and returning error response back to Fuze."
							 * ); sendEmail(transactionId); response =
							 * prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
							 * "Unable to obtain NFID and start the approval process flow:Create Case Project Initiation failed:"
							 * + approvalPIJsonResponse.getStatusMessage(), response);
							 * responseList.add(response); continue; }
							 * 
							 * siteChangeApprovalObj.setApprovalNfId(approvalPIJsonResponse.getNfID());
							 * siteChangeApprovalObj.setApprovalCaseId(approvalPIJsonResponse.getCaseId());
							 * } else { LOG.
							 * info(" Unable to retrieve Approval NFID value from Bonita so returning back ::: "
							 * ); sendEmail(transactionId); response =
							 * prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
							 * "Unable to obtain NFID and start the approval process flow:Create Case Project Initiation failed "
							 * , response); responseList.add(response); continue; }
							 */
							/* start code change for NTSAU-16225 */
							/*
							 * JSONObject obj = new JSONObject(); obj.put("transactionId",
							 * siteChangeApproval.getTransactionId()); obj.put("status", "APPROVED");
							 * obj.put("nfid", siteChangeApproval.getSiteNfId()); obj.put("rejectedBy",
							 * "SYSTEM");
							 * rc.sendCallBackResponse(siteManagementRequest.getApprovalCallbackURL(), obj);
							 */
							/* end code change for NTSAU-16225 */

							String status = null;
							String siteStatus = approvalcallbackinfo.getSiteStatus();
							if (siteStatus == null) {
								status = "PRE-CANDIDATE";
							} else {
								status = overWriteSiteStatusValue(siteStatus.toUpperCase());
							}
							LOG.info("siteStatus after Overwrite :::" + status);

							siteChangeApprovalObj.setSiteStatus(status);
							siteChangeApprovalObj.setTelcoRoomReadyAct(telcoRoomReadyActDate);
							siteChangeApprovalObj.setTelcoRoomReadyEst(telcoRoomReadyEstDate);
							siteChangeApprovalObj.setProjectStatus("Cancelled");

							// ADDED BELOW LINE AS PART OF NTSCR-83849
							siteRepo.updateRemoveFlag('Y', approvalcallbackinfo.getNfid());
							
							SiteChangeApproval siteChangeApprovalsData = siteChangeApprovalRepository
									.findByTransactionId(approvalcallbackinfo.getTransactionId());
							//NTSCR-71229
							String tasknfId = null;nfids=approvalcallbackinfo.getNfid();
							String projectStatus= approvalcallbackinfo.getProjectStatus();
							tasknfId=cancelTaskPAMCall(cancelAckw,nfids,approvalcallbackinfo.getFuzeProjectId(),approvalcallbackinfo.getTransactionId(),projectStatus);
							siteChangeApprovalObj.setApprovalNfId(tasknfId);
							
							
							site_nfid_cancel=site.getSiteNfId();
							//siteChangeApprovalObj.setflag("Y");
							if (siteChangeApprovalsData == null) {
								siteChangeApprovalRepository.save(siteChangeApprovalObj);
							}
							

						}
					}////

//***********************ChangeType Uncancel***********************************//
					if (approvalcallbackinfo.getChangeType().equalsIgnoreCase("Uncancel")) {

						LOG.info(" inside UnCancel changeType condition ::: ");
						String status = null;
						siteNfId = approvalcallbackinfo.getNfid();
						BigInteger strandCount = null;
						if (StringUtils.isNotBlank(approvalcallbackinfo.getFiberCount())) {
							Long strandCountValue = Long.parseLong(approvalcallbackinfo.getFiberCount());
							strandCount = BigInteger.valueOf(strandCountValue);
						}

						LOG.info("SiteNfid " + siteNfId);
						if (approvalcallbackinfo.getNfid() == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NfIid is required for Uncancel", response);
							responseList.add(response);
							continue;
						}

						Site site = siteRepo.findBysiteNfId(siteNfId);
						if (site == null) {
							response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
									"NFID " + approvalcallbackinfo.getNfid() + " does not exist in the request",
									response);
							responseList.add(response);
							continue;
						}
						LOG.info("Site data " + site.toString());
						
						//NTSCR-18793
						Cluster cluster = null;
						String clusterNfId = approvalcallbackinfo.getClusterNfId();
						if(clusterNfId!= null && !clusterNfId.isEmpty()) {
							cluster = clusterRepo.getClusterDetailsByClusterId(clusterNfId);
							LOG.info(clusterNfidTemplate,clusterNfId);
						}
						else {
						//	String marketName = locusService.getMarketName(String.valueOf(approvalcallbackinfo.getSiteLat()),String.valueOf(approvalcallbackinfo.getSiteLong()));
					//	LOG.info("market Name::" + marketName);
							cluster = getClusterIfExistsWithinMarket(approvalcallbackinfo.getMarketName(), approvalcallbackinfo.getClusterName());
						}
						if((cluster==null)||(cluster!=null && !(cluster.getClusterId().toString().equals(site.getClusterId().toString())))) {
							/* response = */ addFailureResponseToListAndProcessErrorInfo(responseList, approvalcallbackinfo, response);
							//continue;
							
						}
						
						SiteChangeApproval siteChangeApprovalData = siteChangeApprovalRepository
								.findByChangeTypeCancelWithPendingTask(siteNfId);
						LOG.info("SiteChangeApprovaldata " + siteChangeApprovalData);
						List<Site> siteList = siteRepo.findBySiteNfId(siteNfId);
						/* siteChangeApprovalData changing condition to !null */

						if (siteChangeApprovalData == null) {

							// siteChangeApproval =
							// rc.copyApprovalCallbackInfoToSiteChangeApproval(approvalcallbackinfo);

							Integer siteChangeSeq = null;
							siteChangeSeq = customQueriesRepository.getSequenceMaxValueForSiteChange();

							siteChangeApprovalObj.setSiteChangeId(siteChangeSeq);
							siteChangeApprovalObj.setTranTime(new Timestamp(System.currentTimeMillis()));
							siteChangeApprovalObj.setReceivedDate(new Date());
							siteChangeApprovalObj.setSiteNfId(approvalcallbackinfo.getNfid());
							siteChangeApprovalObj.setSiteId(siteList.get(0).getSiteId());
							LOG.info("Initiate PI");
							/*
							 * ApprovalPIJsonResponse approvalPIJsonResponse =
							 * rc.getApprovalPIJsonResponse(piUrl, approvalcallbackinfo, siteChangeSeq,
							 * siteManagementRequest, siteList.get(0));
							 */

							LOG.info("Site Category Type in Uncancel:" + siteChangeApprovalObj.getSiteCategoryType());
							siteChangeApprovalObj.setClusterName(approvalcallbackinfo.getClusterName());
							siteChangeApprovalObj.setClusterNfId(approvalcallbackinfo.getClusterNfId());
							siteChangeApprovalObj.setTelcoRoomReadyAct(telcoRoomReadyActDate);
							siteChangeApprovalObj.setTelcoRoomReadyEst(telcoRoomReadyEstDate);
							if (strandCount != null) {
								siteChangeApprovalObj.setVzwStrandCount(strandCount);
							}
							String siteStatus = approvalcallbackinfo.getSiteStatus();
							if (siteStatus == null) {
								status = "PRE-CANDIDATE";
							} else {
								status = overWriteSiteStatusValue(siteStatus.toUpperCase());
							}
							LOG.info("siteStatus after Overwrite :::" + status);
							siteChangeApprovalObj.setSiteStatus(status);
							siteChangeApprovalObj.setCancelReason(null);
							siteChangeApprovalRepository.save(siteChangeApprovalObj);

							siteRepo.updateRemoveFlag('N', approvalcallbackinfo.getNfid());

						} else {
							String transaction_id = siteChangeApprovalData.getTransactionId();
							LOG.info("Transaction ID " + transaction_id);
							LOG.info("Pending Cancel transaction exists, call Bonita to close the task");

							BonitaCompletedTaskResponseBean bonitaCompletResponse = processBonitaCompleteTask(
									siteChangeApprovalData.getApprovalCaseId(),
									approvalcallbackinfo.getTransactionId());

							if (bonitaCompletResponse != null && bonitaCompletResponse.getStatusCode() == 0) {
								LOG.info("Bonita Complete Task got success response ");
								// siteRepo.updateRemoveFlag('N', approvalcallbackinfo.getNfid());
								LOG.info("updating engPmStatus of sca table ...");
								siteChangeApprovalRepository.updateEngPmStatus("CANCELLED", transaction_id);
								siteRepo.updateRemoveFlag('N', approvalcallbackinfo.getNfid());
								LOG.info("updated Remove flag to 'N' in the site table ...");
								// Saving to sca table
								// siteChangeApproval =
								// rc.copyApprovalCallbackInfoToSiteChangeApproval(approvalcallbackinfo);

								Integer siteChangeSeq = null;
								siteChangeSeq = customQueriesRepository.getSequenceMaxValueForSiteChange();

								siteChangeApprovalObj.setSiteChangeId(siteChangeSeq);
								siteChangeApprovalObj.setTranTime(new Timestamp(System.currentTimeMillis()));
								siteChangeApprovalObj.setReceivedDate(new Date());
								siteChangeApprovalObj.setSiteNfId(approvalcallbackinfo.getNfid());
								siteChangeApprovalObj.setSiteId(siteList.get(0).getSiteId());
								siteChangeApprovalObj.setCancelReason(null);
								LOG.info("Site Category Type in Uncancel:"
										+ siteChangeApprovalObj.getSiteCategoryType());
								siteChangeApprovalObj.setClusterName(approvalcallbackinfo.getClusterName());
								siteChangeApprovalObj.setClusterNfId(approvalcallbackinfo.getClusterNfId());
								siteChangeApprovalObj.setTelcoRoomReadyAct(telcoRoomReadyActDate);
								siteChangeApprovalObj.setTelcoRoomReadyEst(telcoRoomReadyEstDate);
								String siteStatus = approvalcallbackinfo.getSiteStatus();
								if (siteStatus == null) {
									status = "PRE-CANDIDATE";
								} else {
									status = overWriteSiteStatusValue(siteStatus.toUpperCase());
								}
								LOG.info("siteStatus after Overwrite :::" + status);
								siteChangeApprovalObj.setSiteStatus(status);
								siteChangeApprovalRepository.save(siteChangeApprovalObj);
							} else {
								response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED,
										"Unable to Uncancel  due to  failure in task auto complete: "
												+ bonitaCompletResponse.getStatusMessage(),
										response);
								responseList.add(response);
								continue;
							}
						}
					}
				} catch (Exception e) {
					LOG.error(" Exception in service class ::: ", e);

					response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_FAILED, e.getMessage(),
							response);
					responseList.add(response);
					continue;
				}
				response = prepareResponse(SiteManagementConstants.RESPONSE_STATUS_SUCCESS, "SUCCESS", response);
				responseList.add(response);
			} // for loop ends here

			
		}
		
		LOG.info("Completed successfully the process...");
		return responseList;

	
